@charset "UTF-8";
/*!
 * Brackets.CSS
 *
 * Designed and built with all the love in my heart 
 * 
 */
/*------------------------------------*\
    $SETTINGS
\*------------------------------------*/
/**
 * Default variables. Redefine these in your `_vars.scss` file
 */
/**
 * Set your base font size here. Define in pixels; the library will
 * convert measurements to the appropriate units (rems or unitless
 * for the line height).
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base font family
 */
/**
 * Default colours for objects’ borders etc.
 */
/**
 * Default value for edges and such
 */
/**
 * Would you like indented (rather than spaced) paragraph delimiting?
 */
/*------------------------------------*\
    $TYPOGRAPHY
\*------------------------------------*/
/**
 * Basic font sizes
 */
/**
 * Headings
 */
/* Header sizes */
/* Subheaders */
/**
 * Smalls
 */
/**
 * Paragraphs
 */
/**
 * Blockquotes
 */
/*------------------------------------*\
    $GRID
\*------------------------------------*/
/**
 * This grid system is heavily based off the work of Harry Roberts of
 * css-wizardry and inuit.css. Css-wizardry-grids provides the basic
 * foundation and inspiration.
 */
/**
 * If you are building a non-responsive site but would still like to use
 * the girds, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the max width of your grids, if you set this to false, the wrapper will only
 * center the content and apply a left/right padding
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like push and pull classes enabled? Keep in mind this adds a large
 * amount of additional code
 */
/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
/*------------------------------------*\
    $LINKS
\*------------------------------------*/
/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
/**
 * I have included varibales for only one buttons, the default, since my wish
 * is to not impose style. Feel free to add more variables. I have included 
 * a mixin to help you generate these easily
 */
/*------------------------------------*\
    $COMPONENTS
\*------------------------------------*/
/**
 * Would you like to show a baseline grid? This is handy during development.
 */
/*------------------------------------*\
    $TOOLS
\*------------------------------------*/
/**
 * We will begin by importing functions that will be used in the
 * framework. There is no need to change any of these functions
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all. 
 */
/**
 * Quickly generate a font-size in rems, with a pixel fallback, based on the
 * value we pass into the mixin, e.g.:
 *
 * h1 {
 *     @include font-size(24px);
 * }
 */
/**
 * Space elements by an amount based on your magic number. Pass in the property
 * to be indented as a paramater, e.g.:
 *
 * pre {
 *    @include typecsset-space(padding-left);
 * }
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#BADA55;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/**
 * Media query for easy breakpoint. Use pixel width with or without units
 * and it will convert to em 
 */
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/**
 * Writes the typical link, button in one go
 * Includes active and focus for accessibility 
 * 
 */
/**
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/**
 * Drop relative positioning into silent classes which can’t take advantage of
 * the `[class*="push--"]` and `[class*="pull--"]` selectors.
 */
/**
 *  Calculates any number of margins and paddings in one swoop
 * 
 * Running this is as easy 
 * @include vertical-calc(1, 12) {}
 *
 */
/*! normalize.css v2.1.0 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/*
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/*
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block;
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/*
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 2 */
}

/*
 * Remove default margin.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/*
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/*
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/*
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/*
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/*
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/*
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/*
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

/*
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/*
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em;
}

/*
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap;
}

/*
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019";
}

/*
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/*
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/*
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0;
}

/*
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/*
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/*
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/*
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */
}

/*
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/*
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/*
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/*
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/*
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/*
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box;
}

/*
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/*
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/*
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/*
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*------------------------------------*\
    $RESTART
\*------------------------------------*/
/**
 * Give a help cursor to elements that give extra info on `:hover`.
 */
abbr[title], dfn[title] {
  cursor: help;
}

/**
 * Remove underlines from potentially troublesome elements.
 */
u, ins {
  text-decoration: none;
}

/**
 * Apply faux underline via `border-bottom`.
 */
ins {
  border-bottom: 1px solid;
}

/**
 * So that `alt` text is visually offset if images don’t load.
 */
img {
  font-style: italic;
}

/**
 * Give form elements some cursor interactions...
 */
label,
input,
textarea,
button,
select,
option {
  cursor: pointer;
}

.text-input:active,
.text-input:focus,
textarea:active,
textarea:focus {
  cursor: text;
  outline: none;
}

input,
button,
select,
textarea {
  font-family: inherit;
  font-size: inherit;
  line-height: inherit;
}

a {
  color: #007cb1;
  text-decoration: none;
}
a:hover, a:focus {
  color: #006a98;
  text-decoration: underline;
}

img {
  vertical-align: middle;
  max-width: 100%;
  /* Set images to the full width of parent */
}

hr {
  border: 0;
  border-top: 1px solid #cccccc;
}

/* Helpful Typography Defaults */
em,
i {
  font-style: italic;
  line-height: inherit;
}

strong,
b {
  font-weight: bold;
  line-height: inherit;
}

small {
  font-size: 80%;
  line-height: inherit;
}

/*------------------------------------*\
    $BASE
\*------------------------------------*/
/* 
 * Reset the box-sizing
 */
/**
 * Let’s make the box model all nice, shall we...?
 */
*, *:before, *:after {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  -ms-box-sizing: border-box;
  -o-box-sizing: border-box;
  box-sizing: border-box;
}

/**
 * 1. Set the base element’s `font-size` to the value of your choosing. Set in
 *    ems, assuming a browser default of 16px.
 * 2. Work out the unitless `line-height` for your project based around your
 *    desired `line-height` (defined previously in pixels), and your project’s
 *    base font size.
 */
/**
 * 3. If you have chosen to display a baseline grid, we turn it on here.
 */
html {
  font-size: 1.25em;
  /* [1] */
  line-height: 1.4;
  /* [2] */
    /**
	 * If you have chosen to display a baseline grid, we turn it on here.
	 */
  background-image: url(http://basehold.it/i/28);
  /* [3] */
}

body {
  font-family: "Helvetica Neue";
  -webkit-font-smoothing: antialiased;
}

/*------------------------------------*\
    $CLEARFIX
\*------------------------------------*/
/**
 * Micro clearfix, as per: css-101.org/articles/clearfix/latest-new-clearfix-so-far.php
 * Extend the clearfix class with Sass to avoid the `.cf` class appearing over
 * and over in your markup.
 */
.cf:after, .nav:after, .island:after,
.islet:after {
  content: "";
  display: table;
  clear: both;
}

/*------------------------------------*\
    $SHARED
\*------------------------------------*/
/**
 * A lot of elements need to share some declarations (mainly for
 * vertical rhythm), so we `@extend` some silent classes.
 */
h1, h2, h3, h4, h5, h6,
hgroup, p,
ul, ol, dl,
address, table,
fieldset, figure,
pre, hr,
.form-fields > li,
.media,
.island,
.islet, .landmark, dd, .h1, .h2, .h3, .h4, .h5, .h6 {
  margin: 0;
  padding: 0;
}

h1, h2, h3, h4, h5, h6,
hgroup, p,
ul, ol, dl,
address, table,
fieldset, figure,
pre, hr,
.form-fields > li,
.media,
.island,
.islet, .landmark, dd, .h1, .h2, .h3, .h4, .h5, .h6 {
  margin-bottom: 28px;
  margin-bottom: 1.4rem;
}

/**
 * Where `margin-bottom` is concerned, this value will be the same as the
 * base line-height. This allows us to keep a consistent vertical rhythm.
 * As per: csswizardry.com/2012/06/single-direction-margin-declarations
 * 
 * We will be using the above silent classes to quickly remove default 
 * margin and padding and quickly apply margin-bottom to the element with
 * default rem units and px fallbacks. 
 * 
 * By default $base-line-height is set to 24px, therefore so is the
 * $magic-number.
 * Therefore, $half-spacing-unit is 12px and $double-spacing-unit is 48px 
 *
 */
/**
 * Base elements
 */
.islet h1, .islet h2, .islet h3, .islet h4, .islet h5, .islet h6, .islet
hgroup, .islet p, .islet
ul, .islet ol, .islet dl, .islet
address, .islet table, .islet
fieldset, .islet figure, .islet
pre, .islet hr, .islet .form-fields > li, .islet
.media, .islet
.island, .islet
.islet {
  margin-bottom: 14px;
  margin-bottom: 0.7rem;
}

/**
 * Doubled up `margin-bottom` helper class.
 */
.landmark {
  margin-bottom: 56px;
  margin-bottom: 2.8rem;
}

/**
 * `hr` elements only take up a few pixels, so we need to give them special
 * treatment regarding vertical rhythm.
 */
hr {
  margin-top: 28px;
  margin-top: 1.4rem;
}

/**
 * Where `margin-left` is concerned we want to try and indent certain elements
 * by a consistent amount. Define that amount once, here.
 */
ul, ol, dd {
  margin-left: 56px;
  margin-left: 2.8rem;
}

/*------------------------------------*\
    $HEADINGS
\*------------------------------------*/
/* 
 * Default header styles 
 */
h1, h2, h3, h4, h5, h6 {
  font-family: "Helvetica Neue";
  font-weight: 500;
  font-style: normal;
  text-rendering: optimizeLegibility;
}
h1 small, h2 small, h3 small, h4 small, h5 small, h6 small {
  font-size: 80%;
}

/**
 * Use the %vertical-rhythm class we created in the _shared.scss file to 
 * set the same rhythm on the heading elements
 */
h1, .h1 {
  font-size: 48px;
  font-size: 2.4rem;
  line-height: 1.1666667;
}

h2, .h2 {
  font-size: 36px;
  font-size: 1.8rem;
  line-height: 1.5555556;
}

h3, .h3 {
  font-size: 30px;
  font-size: 1.5rem;
  line-height: 1.8666667;
}

h4, .h4 {
  font-size: 24px;
  font-size: 1.2rem;
  line-height: 1.1666667;
}

h5, .h5 {
  font-size: 20px;
  font-size: 1rem;
  line-height: 1.4;
}

h6, .h6 {
  font-size: 18px;
  font-size: 0.9rem;
  line-height: 1.5555556;
}

/*------------------------------------*\
    $PARAGRAPHS
\*------------------------------------*/
/* 
 * Default paragraph styles 
 */
.lead {
  font-size: 22.5px;
  font-size: 1.125rem;
}

/**
 * Not strictly a paragraph, but probably doesn’t need its own section.
 */
/*------------------------------------*\
    $LISTS
\*------------------------------------*/
/**
 * Remove vertical spacing from nested lists.
 */
li > ul,
li > ol,
li > dl {
  margin-bottom: 0;
}

/**
 * Have a numbered `ul` without the semantics implied by using an `ol`.
 */
/*ul*/
.numbered-list {
  list-style-type: decimal;
}

.block-list, .form-fields, .check-list {
  list-style: none;
  margin: 0;
}
.block-list > li a, .form-fields > li a, .check-list > li a {
  display: block;
}

/*------------------------------------*\
    $QUOTES
\*------------------------------------*/
/**
 * Big up @boblet: html5doctor.com/blockquote-q-cite
 */
/**
 * 1. Hang the opening quote of the blockquote.
 * .4em is roughly equal to the width of the opening “ that we wish to hang.
 */
blockquote {
  text-indent: -0.41em;
  /* [1] */
}

/**
 * Set up quote marks on quoting elements. This is very English-based, so we are
 * using “, ”, ‘, and ’ quotes.
 *
   <blockquote>
       <p>Insanity: doing the same thing over and over again and expecting
       different results.</p>
       <b class=source>Albert Einstein</b>
   </blockquote>
 *
 */
blockquote {
  quotes: "“" "”";
  font-style: italic;
  padding-left: 14px;
  padding-left: 0.7rem;
  font-size: 25px;
  font-size: 1.25rem;
  line-height: 1.12;
}
blockquote p:before {
  content: "“";
  content: open-quote;
}
blockquote p:after {
  content: "";
  content: no-close-quote;
}
blockquote p:last-of-type {
  margin-bottom: 0;
}
blockquote p:last-of-type:after {
  content: "”";
  content: close-quote;
}

.source {
  display: block;
  text-indent: 0;
}
.source:before {
  content: "\2014";
}

/**
 * Inline quotes.
 */
q {
  quotes: "‘" "’" "“" "”";
  /**
   * If an element opens with an inline quote, let’s hang that.
   */
}
q:before {
  content: "‘";
  content: open-quote;
}
q:after {
  content: "’";
  content: close-quote;
}
q q:before {
  content: "“";
  content: open-quote;
}
q q:after {
  content: "”";
  content: close-quote;
}
q:first-child {
  display: inline-block;
  text-indent: -0.22em;
}

/**
 * Non-fluid images if you specify `width` and/or `height` attributes.
 */
img[width],
img[height] {
  max-width: none;
}

/**
 * Rounded images.
 */
.image--rounded {
  border-radius: 4px;
}

/**
 * Circle images.
 */
.image--circle {
  border-radius: 50%;
}

/**
 * Tumbnail images.
 */
.image--thumbnail {
  padding: 4px;
  border: 1px solid #cccccc;
}

/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */
/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
.wrapper {
  max-width: 1040px;
  max-width: 52rem;
}

.grid {
  list-style: none;
  /* [1] */
  margin: 0;
  /* [2] */
  padding: 0;
  /* [2] */
  margin-left: -28px;
  /* [3] */
  margin-right: -28px;
  /* [3] */
}
.grid:before, .grid:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */
}
.grid:after {
  clear: both;
}

/**
 * 1. Cause columns to stack side-by-side.
 * 2. Space columns apart.
 * 3. Align columns to the tops of each other.
 * 4. Full-width unless told to behave otherwise.
 * 5. Required to combine fluid widths and fixed gutters.
 */
.grid__item {
  float: left;
  padding-left: 28px;
  /* [2] */
  vertical-align: top;
  /* [3] */
  padding-left: 28px;
  padding-left: 1.4rem;
  padding-right: 28px;
  padding-right: 1.4rem;
  width: 100%;
  /* [4] */
  -webkit-box-sizing: border-box;
  /* [5] */
  -moz-box-sizing: border-box;
  /* [5] */
  box-sizing: border-box;
  /* [5] */
}

/**
 * Reversed grids allow you to structure your source in the opposite order to
 * how your rendered layout will appear. Extends `.grid`.
 */
.grid--rev {
  direction: rtl;
  text-align: left;
}
.grid--rev > .grid__item {
  direction: ltr;
  text-align: left;
}

/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 * Extends `.grid`.
 */
.grid--full {
  margin-left: 0;
}
.grid--full > .grid__item {
  padding-left: 0;
}

/**
 * Align the entire grid to the right. Extends `.grid`.
 */
.grid--right {
  text-align: right;
}
.grid--right > .grid__item {
  text-align: left;
}

/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes. Extends `.grid`.
 */
.grid--center {
  text-align: center;
}
.grid--center > .grid__item {
  text-align: left;
}

/**
 * Align grid cells vertically (`.grid--middle` or `.grid--bottom`). Extends
 * `.grid`.
 */
.grid--middle > .grid__item {
  vertical-align: middle;
}

.grid--bottom > .grid__item {
  vertical-align: bottom;
}

/**
 * Create grids with narrower gutters. Extends `.grid`.
 */
.grid--narrow {
  margin-left: -14px;
}
.grid--narrow > .grid__item {
  padding-left: 14px;
}

/**
 * Create grids with wider gutters. Extends `.grid`.
 */
.grid--wide {
  margin-left: -56px;
}
.grid--wide > .grid__item {
  padding-left: 56px;
}

/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
/**
 * Our regular, non-responsive width classes.
 */
/**
 * Whole
 */
.one-whole {
  width: 100%;
}

/**
 * Halves
 */
.one-half, .two-quarters, .three-sixths, .four-eighths, .five-tenths, .six-twelfths {
  width: 50%;
}

/**
 * Thirds
 */
.one-third, .two-sixths, .four-twelfths {
  width: 33.333%;
}

.two-thirds, .four-sixths, .eight-twelfths {
  width: 66.666%;
}

/**
 * Quarters
 */
.one-quarter, .two-eighths, .three-twelfths {
  width: 25%;
}

.three-quarters, .six-eighths, .nine-twelfths {
  width: 75%;
}

/**
 * Fifths
 */
.one-fifth, .two-tenths {
  width: 20%;
}

.two-fifths, .four-tenths {
  width: 40%;
}

.three-fifths, .six-tenths {
  width: 60%;
}

.four-fifths, .eight-tenths {
  width: 80%;
}

/**
 * Sixths
 */
.one-sixth, .two-twelfths {
  width: 16.666%;
}

.five-sixths, .ten-twelfths {
  width: 83.333%;
}

/**
 * Eighths
 */
.one-eighth {
  width: 12.5%;
}

.three-eighths {
  width: 37.5%;
}

.five-eighths {
  width: 62.5%;
}

.seven-eighths {
  width: 87.5%;
}

/**
 * Tenths
 */
.one-tenth {
  width: 10%;
}

.three-tenths {
  width: 30%;
}

.seven-tenths {
  width: 70%;
}

.nine-tenths {
  width: 90%;
}

/**
 * Twelfths
 */
.one-twelfth {
  width: 8.333%;
}

.five-twelfths {
  width: 41.666%;
}

.seven-twelfths {
  width: 58.333%;
}

.eleven-twelfths {
  width: 91.666%;
}

/**
 * Our responsive classes, if we have enabled them.
 */
@media only screen and (max-width: 480px) {
  /**
   * Whole
   */
  .palm--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .palm--one-half, .palm--two-quarters, .palm--three-sixths, .palm--four-eighths, .palm--five-tenths, .palm--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .palm--one-third, .palm--two-sixths, .palm--four-twelfths {
    width: 33.333%;
  }

  .palm--two-thirds, .palm--four-sixths, .palm--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .palm--one-quarter, .palm--two-eighths, .palm--three-twelfths {
    width: 25%;
  }

  .palm--three-quarters, .palm--six-eighths, .palm--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .palm--one-fifth, .palm--two-tenths {
    width: 20%;
  }

  .palm--two-fifths, .palm--four-tenths {
    width: 40%;
  }

  .palm--three-fifths, .palm--six-tenths {
    width: 60%;
  }

  .palm--four-fifths, .palm--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .palm--one-sixth, .palm--two-twelfths {
    width: 16.666%;
  }

  .palm--five-sixths, .palm--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .palm--one-eighth {
    width: 12.5%;
  }

  .palm--three-eighths {
    width: 37.5%;
  }

  .palm--five-eighths {
    width: 62.5%;
  }

  .palm--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .palm--one-tenth {
    width: 10%;
  }

  .palm--three-tenths {
    width: 30%;
  }

  .palm--seven-tenths {
    width: 70%;
  }

  .palm--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .palm--one-twelfth {
    width: 8.333%;
  }

  .palm--five-twelfths {
    width: 41.666%;
  }

  .palm--seven-twelfths {
    width: 58.333%;
  }

  .palm--eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 481px) and (max-width: 1023px) {
  /**
   * Whole
   */
  .lap--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .lap--one-half, .lap--two-quarters, .lap--three-sixths, .lap--four-eighths, .lap--five-tenths, .lap--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .lap--one-third, .lap--two-sixths, .lap--four-twelfths {
    width: 33.333%;
  }

  .lap--two-thirds, .lap--four-sixths, .lap--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .lap--one-quarter, .lap--two-eighths, .lap--three-twelfths {
    width: 25%;
  }

  .lap--three-quarters, .lap--six-eighths, .lap--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .lap--one-fifth, .lap--two-tenths {
    width: 20%;
  }

  .lap--two-fifths, .lap--four-tenths {
    width: 40%;
  }

  .lap--three-fifths, .lap--six-tenths {
    width: 60%;
  }

  .lap--four-fifths, .lap--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .lap--one-sixth, .lap--two-twelfths {
    width: 16.666%;
  }

  .lap--five-sixths, .lap--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .lap--one-eighth {
    width: 12.5%;
  }

  .lap--three-eighths {
    width: 37.5%;
  }

  .lap--five-eighths {
    width: 62.5%;
  }

  .lap--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .lap--one-tenth {
    width: 10%;
  }

  .lap--three-tenths {
    width: 30%;
  }

  .lap--seven-tenths {
    width: 70%;
  }

  .lap--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .lap--one-twelfth {
    width: 8.333%;
  }

  .lap--five-twelfths {
    width: 41.666%;
  }

  .lap--seven-twelfths {
    width: 58.333%;
  }

  .lap--eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (max-width: 1023px) {
  /**
   * Whole
   */
  .portable--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .portable--one-half, .portable--two-quarters, .portable--three-sixths, .portable--four-eighths, .portable--five-tenths, .portable--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .portable--one-third, .portable--two-sixths, .portable--four-twelfths {
    width: 33.333%;
  }

  .portable--two-thirds, .portable--four-sixths, .portable--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .portable--one-quarter, .portable--two-eighths, .portable--three-twelfths {
    width: 25%;
  }

  .portable--three-quarters, .portable--six-eighths, .portable--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .portable--one-fifth, .portable--two-tenths {
    width: 20%;
  }

  .portable--two-fifths, .portable--four-tenths {
    width: 40%;
  }

  .portable--three-fifths, .portable--six-tenths {
    width: 60%;
  }

  .portable--four-fifths, .portable--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .portable--one-sixth, .portable--two-twelfths {
    width: 16.666%;
  }

  .portable--five-sixths, .portable--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .portable--one-eighth {
    width: 12.5%;
  }

  .portable--three-eighths {
    width: 37.5%;
  }

  .portable--five-eighths {
    width: 62.5%;
  }

  .portable--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .portable--one-tenth {
    width: 10%;
  }

  .portable--three-tenths {
    width: 30%;
  }

  .portable--seven-tenths {
    width: 70%;
  }

  .portable--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .portable--one-twelfth {
    width: 8.333%;
  }

  .portable--five-twelfths {
    width: 41.666%;
  }

  .portable--seven-twelfths {
    width: 58.333%;
  }

  .portable--eleven-twelfths {
    width: 91.666%;
  }
}
@media only screen and (min-width: 1024px) {
  /**
   * Whole
   */
  .desk--one-whole {
    width: 100%;
  }

  /**
   * Halves
   */
  .desk--one-half, .desk--two-quarters, .desk--three-sixths, .desk--four-eighths, .desk--five-tenths, .desk--six-twelfths {
    width: 50%;
  }

  /**
   * Thirds
   */
  .desk--one-third, .desk--two-sixths, .desk--four-twelfths {
    width: 33.333%;
  }

  .desk--two-thirds, .desk--four-sixths, .desk--eight-twelfths {
    width: 66.666%;
  }

  /**
   * Quarters
   */
  .desk--one-quarter, .desk--two-eighths, .desk--three-twelfths {
    width: 25%;
  }

  .desk--three-quarters, .desk--six-eighths, .desk--nine-twelfths {
    width: 75%;
  }

  /**
   * Fifths
   */
  .desk--one-fifth, .desk--two-tenths {
    width: 20%;
  }

  .desk--two-fifths, .desk--four-tenths {
    width: 40%;
  }

  .desk--three-fifths, .desk--six-tenths {
    width: 60%;
  }

  .desk--four-fifths, .desk--eight-tenths {
    width: 80%;
  }

  /**
   * Sixths
   */
  .desk--one-sixth, .desk--two-twelfths {
    width: 16.666%;
  }

  .desk--five-sixths, .desk--ten-twelfths {
    width: 83.333%;
  }

  /**
   * Eighths
   */
  .desk--one-eighth {
    width: 12.5%;
  }

  .desk--three-eighths {
    width: 37.5%;
  }

  .desk--five-eighths {
    width: 62.5%;
  }

  .desk--seven-eighths {
    width: 87.5%;
  }

  /**
   * Tenths
   */
  .desk--one-tenth {
    width: 10%;
  }

  .desk--three-tenths {
    width: 30%;
  }

  .desk--seven-tenths {
    width: 70%;
  }

  .desk--nine-tenths {
    width: 90%;
  }

  /**
   * Twelfths
   */
  .desk--one-twelfth {
    width: 8.333%;
  }

  .desk--five-twelfths {
    width: 41.666%;
  }

  .desk--seven-twelfths {
    width: 58.333%;
  }

  .desk--eleven-twelfths {
    width: 91.666%;
  }
}
/*------------------------------------*\
    $PUSH
\*------------------------------------*/
/**
 * Push classes, to move grid items over to the right by certain amounts.
 */
/*------------------------------------*\
    $PULL
\*------------------------------------*/
/**
 * Pull classes, to move grid items back to the left by certain amounts.
 */
/*------------------------------------*\
    $TABLES
\*------------------------------------*/
table {
  width: 100%;
  max-width: 100%;
  border-collapse: collapse;
  border-spacing: 0;
}

th, td {
  text-align: left;
  padding: 14px;
  padding: 0.7rem;
}

/**
 * The table object
 * 1. This is the magic bit; make all children occupy equal width.
 * 2. Required to make the tabs fill their container.
 * 3. Make each tab pack up horizontally.
 * 4. Ensure the hit area covers the whole tab.
 */
.table {
  display: table;
  table-layout: fixed;
  /* [1] */
  list-style: none;
  width: 100%;
  /* [2] */
}

	/**
	 * The cells
     */
.table__item, th, td {
  display: table-cell;
  /* [3] */
}

th, td {
  line-height: 1.4;
}

.table__content {
  display: block;
  /* [4] */
}

/*------------------------------------*\
    $FORMS
\*------------------------------------*/
fieldset {
  border: 0;
  padding: 28px;
  padding: 1.4rem;
}
fieldset + fieldset {
  margin-bottom: 0;
}

.form__inputs:first-of-type {
  margin-bottom: 0;
}

.form__actions {
  margin-bottom: 0;
}

legend {
  display: block;
  width: 100%;
  padding: 0;
  font-size: 25px;
  font-size: 1.25rem;
  line-height: 1.12;
}

/**
 * Text Inputs and Form Control
 *
 * Instead of a `[type]` selector for each kind of form input, we just use a
 * class to target any/every one, e.g.:
 *a
   <input type=text class=text-input>
   <input type=email class=text-input>
   <input type=password class=text-input>
 *
 * For non-text based inputs such as <select>, <radio>, etc use .form-control
 * which allows you to add nice hover/focus effect to the text inputs if you 
 * choose
 *
 */
.text-input:hover, textarea:hover {
  border-color: #8c8c8c;
}

.text-input, .form-control {
  display: block;
  width: 100%;
  /** 
   * Make inputs at least the height of their button counterpart (base line-height + padding + border)
   */
  height: 40px;
  padding-top: 4.6666667px;
  padding-bottom: 4.6666667px;
  font-size: 17.5px;
  line-height: 28px;
  vertical-align: middle;
  background-image: none;
  border: 2px solid #cccccc;
  border-radius: 4px;
  padding-left: 14px;
  padding-left: 0.7rem;
  padding-right: 14px;
  padding-right: 0.7rem;
}
.text-input.disabled, .form-control.disabled {
  cursor: not-allowed;
}

/**
 * Group sets of form fields in a list, e.g.:
 *
   <ul class=form-fields>
       <li>
           <label />
           <input />
       </li>
       <li>
           <label />
           <select />
       </li>
       <li>
           <label />
           <input />
       </li>
   </ul>
 *
 */
.form-fields > li:last-child {
  margin-bottom: 0;
}

/**
 * Labels
 *
 * Define a `.label` class as well as a `label` element. This means we can apply
 * label-like styling to meta-labels for groups of options where a `label`
 * element is not suitable, e.g.:
 *
   <li>
       <span class=label>Select an option below:</span>
      <ul class="multi-list  four-cols">
          <li>
              <input /> <label />
          </li>
          <li>
              <input /> <label />
          </li>
          <li>
              <input /> <label />
          </li>
          <li>
              <input /> <label />
          </li>
      </ul>
  </li>
 *
 */
label,
.label {
  display: block;
}

/**
 * Extra help text in `label`s, e.g.:
 *
   <label>Card number <small class=additional>No spaces</small></label>
 *
 */
.additional {
  display: block;
  font-weight: normal;
}

/*
 * Groups of checkboxes and radios, e.g.:
 *
   <li>
       <ul class=check-list>
           <li>
               <input /> <label />
           </li>
           <li>
               <input /> <label />
           </li>
       </ul>
   </li>
 *
 */
/*
 * Labels in check-lists
 */
.check-label,
.check-list label,
.check-list .label {
  display: inline-block;
}

/**
 * Spoken forms are for forms that read like spoken word, e.g.:
 *
   <li class=spoken-form>
       Hello, my <label for=spoken-name>name</label> is
       <input type=text class=text-input id=spoken-name>. My home
       <label for=country>country</label> is
       <select id=country>
           <option>UK</option>
           <option>US</option>
           <option>Other</option>
       </select>
   </li>
 *
 */
.spoken-form label {
  display: inline-block;
  font: inherit;
}

/**
 * Extra help text displayed after a field when that field is in focus, e.g.:
 *
   <label for=email>Email:</label>
   <input type=email class=text-input id=email>
   <small class=extra-help>.edu emails only</small>
 *
 * We leave the help text in the document flow and merely set it to
 * `visibility:hidden;`. This means that it won’t interfere with anything once
 * it reappears.
 *
 */
/*small*/
.form-help {
  display: block;
  visibility: hidden;
  max-height: 0;
}

.text-input:active + .form-help,
.text-input:focus + .form-help {
  visibility: visible;
  max-height: inherit;
  margin-top: 6px;
  margin-top: 0.3rem;
}

.button {
  display: inline-block;
  max-width: 100%;
  min-width: 80px;
  padding: 6px 12px;
  margin-bottom: 0;
  font-size: 16px;
  font-size: 0.8rem;
  line-height: 1.75;
  line-height: 1.6;
  text-align: center;
  vertical-align: middle;
  cursor: pointer;
  background-image: none;
  border: 2px solid transparent;
  border-radius: 4px;
  white-space: nowrap;
  background-color: #cccccc;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}
.button:focus {
  outline: thin dotted #333;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}
.button:hover, .button:focus {
  background-color: #b3b3b3;
  text-decoration: none;
}
.button:active, .button.active {
  outline: 0;
  background-image: none;
}
.button.disabled, .button[disabled], fieldset[disabled] .button {
  cursor: not-allowed;
  pointer-events: none;
  opacity: 0.65;
  filter: alpha(opacity=65);
}

/*------------------------------------*\
    $ISLANDS
\*------------------------------------*/
/**
 * Simple, boxed off content, as per: csswizardry.com/2011/10/the-island-object
 * E.g.:
 *
   <div class=island>
       I am boxed off.
   </div>
 *
 * Demo: jsfiddle.net/inuitcss/u8pV3
 *
 */
.island,
.islet {
  display: block;
}

.island {
  padding: 28px;
  padding: 1.4rem;
}

.island > :last-child,
.islet > :last-child {
  margin-bottom: 0;
}

/**
 * Just like `.island`, only smaller.
 */
.islet {
  padding: 14px;
  padding: 0.7rem;
}

/*------------------------------------*\
    $NAV
\*------------------------------------*/
/**
 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
 * e.g.:
 *
   <ul class=nav>
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Demo: jsfiddle.net/inuitcss/Vnph4
 *
 */
.nav {
  list-style: none;
  margin-left: 0;
}
.nav > li,
.nav > li > a {
  display: inline-block;
  *display: inline;
  zoom: 1;
}

/**
 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
 *
   <ul class="nav  nav--stacked">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--stacked > li {
  display: list-item;
}
.nav--stacked > li > a {
  display: block;
}

/**
 * `.nav--banner` extends `.nav` and centres the list, e.g.:
 *
   <ul class="nav  nav--banner">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--banner {
  text-align: center;
}

/**
 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
 *
   <ul class="nav  nav--block">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 */
.nav--block {
  line-height: 1;
  /**
   * Remove whitespace caused by `inline-block`.
   */
  letter-spacing: -0.31em;
  word-spacing: -0.43em;
  white-space: nowrap;
}
.nav--block > li {
  letter-spacing: normal;
  word-spacing: normal;
}
.nav--block > li > a {
  padding: 14px;
  padding: 0.7rem;
}

/**
 * Force a nav to occupy 100% of the available width of its parent. Extends
 * `.nav`, e.g.:
 *
   <ul class="nav  nav--fit">
       <li><a href=#>Home</a></li>
       <li><a href=#>About</a></li>
       <li><a href=#>Portfolio</a></li>
       <li><a href=#>Contact</a></li>
   </ul>
 *
 * Thanks to @pimpl for this idea!
 */
.nav--fit {
  display: table;
  width: 100%;
}
.nav--fit > li {
  display: table-cell;
}
.nav--fit > li > a {
  display: block;
}

/**
 * Make a list of keywords. Extends `.nav`, e.g.:
 *
   `<ul class="nav  nav--keywords>`
 *
 */
.nav--keywords > li:after {
  content: "\002C" "\00A0";
}
.nav--keywords > li:last-child:after {
  display: none;
}

/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
/**
 * Calculate all padding margin helper mixins
 */
.mt1, .mtb1 {
  margin-top: 7px;
  margin-top: 0.4375rem;
}

.mb1, .mtb1 {
  margin-bottom: 7px;
  margin-bottom: 0.4375rem;
}

.pt1, .ptb1 {
  padding-top: 7px;
  padding-top: 0.4375rem;
}

.pb1, .ptb1 {
  padding-bottom: 7px;
  padding-bottom: 0.4375rem;
}

.mt2, .mtb2 {
  margin-top: 14px;
  margin-top: 0.875rem;
}

.mb2, .mtb2 {
  margin-bottom: 14px;
  margin-bottom: 0.875rem;
}

.pt2, .ptb2 {
  padding-top: 14px;
  padding-top: 0.875rem;
}

.pb2, .ptb2 {
  padding-bottom: 14px;
  padding-bottom: 0.875rem;
}

.mt3, .mtb3 {
  margin-top: 21px;
  margin-top: 1.3125rem;
}

.mb3, .mtb3 {
  margin-bottom: 21px;
  margin-bottom: 1.3125rem;
}

.pt3, .ptb3 {
  padding-top: 21px;
  padding-top: 1.3125rem;
}

.pb3, .ptb3 {
  padding-bottom: 21px;
  padding-bottom: 1.3125rem;
}

.mt4, .mtb4 {
  margin-top: 28px;
  margin-top: 1.75rem;
}

.mb4, .mtb4 {
  margin-bottom: 28px;
  margin-bottom: 1.75rem;
}

.pt4, .ptb4 {
  padding-top: 28px;
  padding-top: 1.75rem;
}

.pb4, .ptb4 {
  padding-bottom: 28px;
  padding-bottom: 1.75rem;
}

.mt5, .mtb5 {
  margin-top: 35px;
  margin-top: 2.1875rem;
}

.mb5, .mtb5 {
  margin-bottom: 35px;
  margin-bottom: 2.1875rem;
}

.pt5, .ptb5 {
  padding-top: 35px;
  padding-top: 2.1875rem;
}

.pb5, .ptb5 {
  padding-bottom: 35px;
  padding-bottom: 2.1875rem;
}

.mt6, .mtb6 {
  margin-top: 42px;
  margin-top: 2.625rem;
}

.mb6, .mtb6 {
  margin-bottom: 42px;
  margin-bottom: 2.625rem;
}

.pt6, .ptb6 {
  padding-top: 42px;
  padding-top: 2.625rem;
}

.pb6, .ptb6 {
  padding-bottom: 42px;
  padding-bottom: 2.625rem;
}

.mt7, .mtb7 {
  margin-top: 49px;
  margin-top: 3.0625rem;
}

.mb7, .mtb7 {
  margin-bottom: 49px;
  margin-bottom: 3.0625rem;
}

.pt7, .ptb7 {
  padding-top: 49px;
  padding-top: 3.0625rem;
}

.pb7, .ptb7 {
  padding-bottom: 49px;
  padding-bottom: 3.0625rem;
}

.mt8, .mtb8 {
  margin-top: 56px;
  margin-top: 3.5rem;
}

.mb8, .mtb8 {
  margin-bottom: 56px;
  margin-bottom: 3.5rem;
}

.pt8, .ptb8 {
  padding-top: 56px;
  padding-top: 3.5rem;
}

.pb8, .ptb8 {
  padding-bottom: 56px;
  padding-bottom: 3.5rem;
}

.mt9, .mtb9 {
  margin-top: 63px;
  margin-top: 3.9375rem;
}

.mb9, .mtb9 {
  margin-bottom: 63px;
  margin-bottom: 3.9375rem;
}

.pt9, .ptb9 {
  padding-top: 63px;
  padding-top: 3.9375rem;
}

.pb9, .ptb9 {
  padding-bottom: 63px;
  padding-bottom: 3.9375rem;
}

.mt10, .mtb10 {
  margin-top: 70px;
  margin-top: 4.375rem;
}

.mb10, .mtb10 {
  margin-bottom: 70px;
  margin-bottom: 4.375rem;
}

.pt10, .ptb10 {
  padding-top: 70px;
  padding-top: 4.375rem;
}

.pb10, .ptb10 {
  padding-bottom: 70px;
  padding-bottom: 4.375rem;
}

.mt11, .mtb11 {
  margin-top: 77px;
  margin-top: 4.8125rem;
}

.mb11, .mtb11 {
  margin-bottom: 77px;
  margin-bottom: 4.8125rem;
}

.pt11, .ptb11 {
  padding-top: 77px;
  padding-top: 4.8125rem;
}

.pb11, .ptb11 {
  padding-bottom: 77px;
  padding-bottom: 4.8125rem;
}

.mt12, .mtb12 {
  margin-top: 84px;
  margin-top: 5.25rem;
}

.mb12, .mtb12 {
  margin-bottom: 84px;
  margin-bottom: 5.25rem;
}

.pt12, .ptb12 {
  padding-top: 84px;
  padding-top: 5.25rem;
}

.pb12, .ptb12 {
  padding-bottom: 84px;
  padding-bottom: 5.25rem;
}

/**
 * Add/remove floats
 */
.float--right {
  float: right !important;
}

.float--left {
  float: left !important;
}

.float--none {
  float: none !important;
}

/**
 * Text alignment
 */
.text--left {
  text-align: left  !important;
}

.text--center {
  text-align: center !important;
}

.text--right {
  text-align: right !important;
}

/**
 * Font weights
 */
.weight--light {
  font-weight: 300 !important;
}

.weight--normal {
  font-weight: 400 !important;
}

.weight--semibold {
  font-weight: 600 !important;
}

/**
 * Add/remove margins
 */
.push {
  margin: 28px !important;
}

.push--top {
  margin-top: 28px !important;
}

.push--right {
  margin-right: 28px !important;
}

.push--bottom {
  margin-bottom: 28px !important;
}

.push--left {
  margin-left: 28px !important;
}

.push--ends {
  margin-top: 28px !important;
  margin-bottom: 28px !important;
}

.push--sides {
  margin-right: 28px !important;
  margin-left: 28px !important;
}

.push-half {
  margin: 28px !important;
}

.push-half--top {
  margin-top: 28px !important;
}

.push-half--right {
  margin-right: 28px !important;
}

.push-half--bottom {
  margin-bottom: 28px !important;
}

.push-half--left {
  margin-left: 28px !important;
}

.push-half--ends {
  margin-top: 28px !important;
  margin-bottom: 28px !important;
}

.push-half--sides {
  margin-right: 28px !important;
  margin-left: 28px !important;
}

.flush {
  margin: 0 !important;
}

.flush--top {
  margin-top: 0 !important;
}

.flush--right {
  margin-right: 0 !important;
}

.flush--bottom {
  margin-bottom: 0 !important;
}

.flush--left {
  margin-left: 0 !important;
}

.flush--ends {
  margin-top: 0 !important;
  margin-bottom: 0 !important;
}

.flush--sides {
  margin-right: 0 !important;
  margin-left: 0 !important;
}

/**
 * Add/remove paddings
 */
.soft {
  padding: 28px !important;
}

.soft--top {
  padding-top: 28px !important;
}

.soft--right {
  padding-right: 28px !important;
}

.soft--bottom {
  padding-bottom: 28px !important;
}

.soft--left {
  padding-left: 28px !important;
}

.soft--ends {
  padding-top: 28px !important;
  padding-bottom: 28px !important;
}

.soft--sides, .wrapper {
  padding-right: 28px !important;
  padding-left: 28px !important;
}

.soft-half {
  padding: 14px !important;
}

.soft-half--top {
  padding-top: 14px !important;
}

.soft-half--right {
  padding-right: 14px !important;
}

.soft-half--bottom {
  padding-bottom: 14px !important;
}

.soft-half--left {
  padding-left: 14px !important;
}

.soft-half--ends {
  padding-top: 14px !important;
  padding-bottom: 14px !important;
}

.soft-half--sides {
  padding-right: 14px !important;
  padding-left: 14px !important;
}

.hard {
  padding: 0 !important;
}

.hard--top {
  padding-top: 0 !important;
}

.hard--right {
  padding-right: 0 !important;
}

.hard--bottom {
  padding-bottom: 0 !important;
}

.hard--left {
  padding-left: 0 !important;
}

.hard--ends {
  padding-top: 0 !important;
  padding-bottom: 0 !important;
}

.hard--sides {
  padding-right: 0 !important;
  padding-left: 0 !important;
}

/**
 * Pull items full width of `.island` parents.
 */
.full-bleed {
  margin-right: -28px !important;
  margin-left: -28px !important;
}
.islet .full-bleed {
  margin-right: -14px !important;
  margin-left: -14px !important;
}

/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative {
  cursor: help !important;
}

/**
 * Mute an object by reducing its opacity.
 */
.muted {
  opacity: 0.5 !important;
  filter: alpha(opacity=50) !important;
}

/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */
.go:after {
  content: "\00A0" "\00BB" !important;
}

/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps {
  text-transform: uppercase !important;
}

/**
 * Hide content off-screen without resorting to `display:none;`, also provide
 * breakpoint specific hidden elements.
 */
.accessibility,
.visuallyhidden {
  border: 0 !important;
  clip: rect(0 0 0 0) !important;
  height: 1px !important;
  margin: -1px !important;
  overflow: hidden !important;
  padding: 0 !important;
  position: absolute !important;
  width: 1px !important;
}

/**
 * Content Alignment
 */
.wrapper, .center-block, .centered {
  margin-left: auto;
  margin-right: auto;
}

.center-block {
  width: 100%;
  text-align: center;
}

/**
 * Attatch peices of content to each other
 */
.attached--top {
  margin-bottom: 0;
  border-bottom-right-radius: 0;
  border-bottom-left-radius: 0;
}

.attached--bottom {
  margin-top: 0;
  border-top-right-radius: 0;
  border-top-left-radius: 0;
}

html {
  /**
   * Other html fixes and base settings
   */
  overflow-y: scroll;
  min-height: 100%;
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
}

body {
  padding: 28px;
  padding: 1.4rem;
  -webkit-font-smoothing: antialiased;
}
