/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesnâ€™t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */


/**
 * Add/remove floats
 */
.float--right, %float--right    { float:right!important; }
.float--left,  %float--left     { float:left !important; }
.float--none,  %float--none     { float:none !important; }


/**
 * Text alignment
 */
.text--left,   %text--left       { text-align:left  !important; }
.text--center, %text--center     { text-align:center!important; }
.text--right,  %text--right      { text-align:right !important; }


/**
 * Font weights
 */
.weight--light,      %weight--light       { font-weight:100!important; }
.weight--semi-light, %weight--semilight  { font-weight:300!important; }
.weight--normal,     %weight--normal      { font-weight:400!important; }
.weight--semibold,   %weight--semibold    { font-weight:600!important; }

/**
 * View helpers
 */
.overflow--hide, %overflow--hide{ overflow: hidden; }
.overflow--show, %overflow--show{ overflow: visible; }


/**
 * Positioning
 */
.position--absolute, %position--absolute{ position: absolute; }
.position--relative, %position--relative{ position: relative; }
.position--fixed,    %position--fixed{ position: fixed; }


/**
 * Display
 */
.display--block, %display--block{ display: block;}
.display--inline-block, %display--inline-block{ display: inline-block;}
.display--inline, %display--inline{ display: inline;}


/**
 * Sizes
 */
.full-height, %full-height{height: 100%;}
.full-width, %full-width{width: 100%;}

/**
 * Content Alignment
 */
%centered, .centered{ margin-left: auto; margin-right: auto;}

%center-block, .center-block{
	@extend %center;
	
	width: 100%;
	text-align: center;
}




/**
 * Pull items full width of `.island` parents.
 */
.full-bleed{
    margin-right:-$base-line-height !important;
    margin-left: -$base-line-height !important;

    .islet &{
        margin-right:-($base-line-height / 2)!important;
        margin-left: -($base-line-height / 2)!important;
    }
}


/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative, %informative{
    cursor:help!important;
}


/**
 * Mute an object by reducing its opacity.
 */
.muted, %muted{
    opacity:0.5!important;
    filter:alpha(opacity = 50)!important;
}


/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */
.go:after, .go:after{
    content:"\00A0" "\00BB"!important;
}


/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps, %caps{
    text-transform:uppercase!important;
}


/**
 * Hide content off-screen without resorting to `display:none;`, also provide
 * breakpoint specific hidden elements.
 */
@mixin accessibility{
    border:0!important;
    clip:rect(0 0 0 0)!important;
    height:1px!important;
    margin:-1px!important;
    overflow:hidden!important;
    padding:0!important;
    position: absolute!important;
    width:1px!important;
}
.accessibility,
.visuallyhidden{
    @include accessibility;
}
@if $responsive{
    @each $state in $breakpoints{
        @include grid-media-query(#{$state}){
            .accessibility--#{$state},
            .visuallyhidden--#{$state}{
                @include accessibility;
            }
        }
    }
}


/**
 * Content Alignment
 */
%center, .centered{
	margin-left: auto;
	margin-right: auto;
}

%center-block, .center-block{
	@extend %center;
	
	width: 100%;
	text-align: center;
}
